import setFeedback from '../../../services/setFeedback.js'
import getModelService from '../../../services/getModelService.js'
import { showMessage } from '#@/databases/http_fluentd.js'
import AutomationCardService from '../services/card_base/automationCardService.js'
import ManualCardService from '../services/card_base/manualCardService.js'
import countRatingService from '../services/card_rating/countRatingService.js'
import countReactionService from '../services/card_reaction/countReactionService.js'
import getCardRewardService from '../services/card_rewards/getCardRewardService.js'
import CommonCardTemplate from '../services/card_base/templateService.js'


/**
 * Generate a standard payload to respond to the client
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 */
const generatePayload = async (req, res, next) => {
    const model = getModelService(req);
    const ratings = model.payload.rates;
    const reactions = model.payload.reactions;
    const rewards = model.payload.rewards;
    const base = model.payload.base;

    try {
        base.forEach(item => {
            const ratingAtIndex = ratings[item.cid];
            const reactionAtIndex = reactions[item.cid];
            item.rating = ratingAtIndex;
            item.reactions = reactionAtIndex;

            if (item.ctype === CommonCardTemplate.ctype.manual) {

                // * Mapping the badges to the card by uid
                const rewardAtIndex = rewards.filter(reward => reward.uid === item.uid);
                const badges = rewardAtIndex.map(item => {
                    return {
                        ...CommonCardTemplate.badgesTemplate,
                        code: item.code,
                        validDate: item.validDate,
                        expiredDate: item.expiredDate,
                        name: item.name,
                    }
                });
                item.badges = badges.length > 0 ? badges : [];

                // sort products by id
                item.products = item.data.products.sort((a, b) => {
                    return a.id - b.id;
                });

                // sort customers by id
                item.customers = item.data.customers.sort((a, b) => {
                    return a.id - b.id;
                });
            }

            if (item.ctype === CommonCardTemplate.ctype.auto) {
                /***
                 * * Set 2 stars default for auto cards
                 */
                item.rating = 2;
                item.badges.push({
                    ...CommonCardTemplate.badgesTemplate,
                    code: 'AI',
                    name: 'Generated by AI',
                })
            }

        });
    }
    catch (error) {
        console.error("Error generating payload:", error);
        return res.status(500).json(setFeedback(req.feedback, false, 'error', { error: 'Internal server error' }));
    }

    return next();

}

export default generatePayload;