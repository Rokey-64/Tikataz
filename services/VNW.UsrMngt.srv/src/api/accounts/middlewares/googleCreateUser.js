import getModelService from "#@/services/getModelService.js";
import { hashPassword } from '#@/services/password-hashing/index.js'
import createAccount from "../resositories/createAccount.js";
import { nanoid } from "nanoid";
import setFeedback from "#@/services/setFeedback.js";
import lookingUserBeforeLogin from "../resositories/lookingUserBeforeLogin.js";
import { showMessage } from '#@/services/fluentd-connection/fluentd-jack.js';

/**
 * create or get a user account in the database with google authentication
 * @param {*} req 
 * @param {*} res 
 * @param {*} next 
 * @returns 
 */
const googleCreateUser  = async (req, res, next) => {
    const model = getModelService(req);
    const user = req?.user;

    if (model.hasAccount) {
        /**
         * If the user has an account, get it from the database
         */
        // try {
        //     const result = await lookingUserBeforeLogin(user.emails[0].value);
        //     model.user = result;
        // }
        // catch (err) {
        //     return res.status(500).json(setFeedback(req.feedback, false));
        // }
        return next();
        
    }

    /**
     * Create a new password for the user
     * password is generated by nanoid
     */
    const passwordInit = await hashPassword(nanoid());
    const uid = nanoid();
    try {
        await createAccount(
            uid, /** uid */
            user.displayName, /** userName */
            passwordInit, /**auto hashPassword */
            user.emails[0].value, /** email */
            user.id, /** googleId */
            'google' /** loginType */
        );

        model.user = {
            userID: uid,
            email: user.emails[0].value
        };
    }
    catch (err) {
        showMessage(`Google login error: ${err.message}`, 'googleCreateUser.js');
        return res.redirect(process.env.USER_CLIENT_DOMAIN);
    }

    return next();

}

export default googleCreateUser;
