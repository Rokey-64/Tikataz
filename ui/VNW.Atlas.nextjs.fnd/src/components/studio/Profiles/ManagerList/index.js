
import React, { useState, useEffect } from "react";
import { IoAdd } from "react-icons/io5";
import { nanoid } from "nanoid";
import { useDispatch, useSelector } from "react-redux";
import { setLeaders, deleteLeaders } from "../../../../redux/leadersSlice";
import AboveFixedContainer from "../../common/AboveFixedContainer";
import AboveInsertedButton from "../../common/AboveInsertedButton";
import ManagerEditor from "./ManagerEditor";
import ManagerShortDisplay from "./ManagerShortDisplay";
import InsertNoticeText from "../../common/InsertNoticeText";
import RightDeleteContainer from "../../common/RightDeleteContainer";
import ManagerDetailDisplay from "./ManagerDetailDisplay";
import loadLeadersAPI from "../../../../api/loadLeaders";
import DeleteLeadersAPI from "../../../../api/deleteLeader";
import DelayedRoute from "../../../../services/routeDelay";
import { useTranslation } from "react-i18next";

/** */
const ManagerList = () => {
    const dispatch = useDispatch();
    const { t } = useTranslation();
    const leaders = useSelector((state) => state.leaders);
    const [leadersInspector, setLeadersInspector] = useState({
        referenceState: ["add", "edit", "delete", "display"],
        state: "",
        currentObjects: [],
        selectedObjects: [],
        objectTemplate: {
            id: "",
            name: "",
            position: "",
            date: "",
            phone: "",
            email: "",
            slogan: "",
            logo: ""
        }
    });

    /** 
     * Load leaders from the server for the first time 
     */
    useEffect(() => {
        if (leaders.length > 0)
            return;

        /**
         * Load leaders from the server
         */
        loadLeadersAPI().then((data) => {
            if (data) {
                dispatch(setLeaders(data.leaders));
            }
        });
    }, []);

    /**
     * Handles the addition of a new row to the table.
     * Adds a new object to the objects array.
     */
    const addHandleClick = () => {
        /**
         * Create a temporary id for the new object and it will be replaced by the real id when the object is saved.
         */
        const temporaryID = nanoid();

        /**
         * Make a copy of the object template and add the temporary id to it.
         */
        const curentObject = { ...leadersInspector.objectTemplate, id: temporaryID };

        /**
         * Set the state to "add" and set the currentObject to the new object.
         */
        setLeadersInspector({ ...leadersInspector, state: "add", currentObjects: [curentObject] });
    };

    /**
     * Handles the editing of a row in the table. 
     * Sets the state to "edit" and sets the currentObject to the object that is being edited.
     */
    const editHandleClick = (item) => {
        setLeadersInspector({ ...leadersInspector, state: "edit", currentObjects: [item] });
    };

    /**
     * Handles the deletion of a row in the table. 
     * Sets the state to "delete" and sets the currentObject to the object that is being deleted.
     * 
     * @param {string} id The id of the object that is being deleted.
     */
    const deleteHandleClick = (item) => {
        setLeadersInspector({ ...leadersInspector, state: "delete", selectedObjects: [item.id], currentObjects: [item] });
    }

    /**
     * Show a object in detail
     * 
     * @param {string} id The id of the object that you want to display.
     */
    const displayHandleClick = (item) => {
        setLeadersInspector({ ...leadersInspector, state: "display", currentObject: [item] });
    }

    /**
     * When the user clicks the delete button, it raises a request to delete the selected objects.
     */
    const deleteCallback = () => {
        if (leadersInspector.selectedObjects.length === 0)
            return;

        DeleteLeadersAPI(leadersInspector.selectedObjects[0]).then((res) => {
            if (res) {
                dispatch(deleteLeaders([...leadersInspector.selectedObjects]));
                setLeadersInspector({ ...leadersInspector, state: "" });
            }
            else {
                alert(t("delete_failed"));
            }
        });
    };

    return (
        <DelayedRoute>
            <div>
                <AboveFixedContainer children={<AboveInsertedButton callback={addHandleClick} content={`${t("add_member")}`} options={{ icon: IoAdd }} />} />
                <div className="flex">
                    <div className="overflow-y-auto overflow-x-auto max-h-[calc(100vh-8.5rem)] min-h-[calc(100vh-7.2rem)] w-[calc(100vw-10px)] md:w-[calc(100vw-270px)] p-2 
                    flex justify-start">
                        <div className="flex flex-wrap gap-4 items-start justify-start sm:justify-start">
                            {
                                leaders && leaders.map((item, index) =>
                                    <ManagerShortDisplay key={index} profile={item}
                                        deleteOnclick={deleteHandleClick.bind(this, item)}
                                        editOnclick={editHandleClick.bind(this, item)}
                                        displayOnClick={displayHandleClick.bind(this, item)} />
                                )
                            }
                        </div>
                        {
                            leaders.length === 0 && (
                                <div className="mt-3">
                                    <InsertNoticeText header={<strong>H√£y c·∫≠p nh·∫≠t th√¥ng tin ban l√£nh ƒë·∫°o c·ªßa doanh nghi·ªáp b·∫°n</strong>}
                                        content={
                                            <div className="w-[35rem] space-y-1 space-x-1">
                                                <h2><strong>üî∞ ƒêi·ªÅu n√†y gi√∫p b·∫°n</strong></h2>
                                                <p>‚úî Ho√†n thi·ªán h·ªì s∆° nƒÉng l·ª±c c·ªßa doanh nghi·ªáp</p>
                                                <p>‚úî TƒÉng m·ª©c ƒë·ªô uy t√≠nh doanh nghi·ªáp b·∫°n</p>
                                                <p>‚úî H·ªá th·ªëng s·∫Ω ƒë√°nh gi√° ƒëi·ªÉm s·ªë th√¥ng tin m√† b·∫°n cung c·∫•p, t·ª´ ƒë√≥ tƒÉng ƒë·ªÅ xu·∫•t v·ªõi kh√°ch h√†ng ti·ªÅm nƒÉng</p>
                                                <br />
                                                <h2 ><strong>‚ö† L∆∞u √Ω:</strong></h2>
                                                <p>Ch√∫ng t√¥i ki·ªÉm duy·ªát tr∆∞·ªõc khi ch·∫•p thu·∫≠n n√≥ nh∆∞ m·ªôt ph·∫ßn c·ªßa h·ªì s∆° doanh nghi·ªáp c·ªßa b·∫°n.</p>
                                            </div>
                                        }
                                    />
                                </div>
                            )
                        }
                    </div>
                </div>
                {["add"].includes(leadersInspector.state) && <ManagerEditor state={leadersInspector} setState={setLeadersInspector} />}
                {["edit"].includes(leadersInspector.state) && <ManagerEditor state={leadersInspector} setState={setLeadersInspector} />}
                {["display"].includes(leadersInspector.state) && <ManagerDetailDisplay state={leadersInspector} setState={setLeadersInspector} />}
                {
                    ["delete"].includes(leadersInspector.state) &&
                    <RightDeleteContainer headerContent={<h2 className="text-lg font-semibold text-gray-800">{t("delete_member")}</h2>}
                        state={leadersInspector} setState={setLeadersInspector}
                        callback={deleteCallback}
                        children={
                            <InsertNoticeText header={<strong className="text-[14px] text-black ">Vi·ªác x√≥a th√†nh vi√™n t√°c ƒë·ªông nh∆∞ th·∫ø n√†o ƒë·∫øn quy tr√¨nh c·ªßa b·∫°n?</strong>}
                                content={
                                    <div className="text-[13px] text-black font-sans text-justify leading-5 space-y-2">
                                        <p>Th√†nh vi√™n b·ªã x√≥a s·∫Ω kh√¥ng th·ªÉ ti·∫øp t·ª•c hi·ªán th·ªã tr√™n h·ªì s∆° doanh nghi·ªáp c·ªßa b·∫°n.
                                            Th√¥ng tin th√†nh vi√™n s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ 30 ng√†y v√† b·∫°n c√≥ th·ªÉ kh√¥i ph·ª•c l·∫°i sau khi x√≥a.
                                        </p>
                                        <p>M·∫∑c d√π th√¥ng tin s·∫Ω ƒë∆∞·ª£c x√≥a, nh∆∞ng nh·ªØng t√°c ƒë·ªông ƒë·∫øn uy t√≠nh doanh nghi·ªáp c·ªßa b·∫°n t·∫°o b·ªüi th√†nh vi√™n v·∫´n s·∫Ω ƒë∆∞·ª£c l∆∞u tr·ªØ
                                            d√πng cho m·ª•c ƒë√≠ch ƒë√°nh gi√° m·ª©c ƒë·ªô uy t√≠nh doanh nghi·ªáp b·∫°n</p>
                                        <p>Vi·ªác b·∫°n th√™m m·ªõi th√†nh vi√™n s·∫Ω ƒë∆∞·ª£c ch√∫ng t√¥i ki·ªÉm duy·ªát v√† ƒë√°nh gi√° tr∆∞·ªõc khi c·∫≠p nh·∫≠t t·ªõi h·ªì s∆° doanh nghi·ªáp c·ªßa b·∫°n.</p>
                                    </div>
                                }
                            />}>
                    </RightDeleteContainer>
                }
            </div>
        </DelayedRoute>
    )
};

export default ManagerList;